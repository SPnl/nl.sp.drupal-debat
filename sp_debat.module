<?php

function sp_debat_permission() {
  return array('subscribe debates' => array('title' => 'Inschrijven debatten', 'restrict access' => TRUE));
}

function sp_debat_menu() {
  $items = array();
  $items['aanmelden/voorzittersdebat'] = array(
    'title' => 'Aanmelden aanwezigen voorzittersdebat',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sp_debat_subscription_form'),
    'access arguments' => array('subscribe debates'),
    'file' => 'sp_debat.subscription_form.inc',
  );
  $items['aanmelden/voorzittersdebat/autocomplete_members/%'] = array(
    'page callback' => 'sp_debat_autocomplete_members',
    'page arguments' => array(3),
    'access arguments' => array('subscribe debates'),
    'type' => MENU_CALLBACK,
    'file' => 'sp_debat.subscription_form.inc',
  );
  $items['admin/config/sp/debat'] = [
    'title' => 'Voorzittersdebat aanmeldformulier',
    'description' => 'Debat aanmeldformulier instellen.',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sp_debat_admin_form'), 
    'access arguments' => array('access administration pages'),
    'file' => 'sp_debat.admin.inc',
    ];

  return $items;
}

/**
 * Retrieves a CiviCRM contact by Drupal user ID.
 */
function sp_debat_get_civi_contact($uid) {
  $contacts = &drupal_static(__FUNCTION__);
  if (isset($contacts[$uid])) {
    return $contacts[$uid];
  }
  if (!isset($contacts)) {
    $contacts = array();
  }
  $contacts[$uid] = FALSE;
  civicrm_initialize();
  require_once 'api/api.php';
  $res = civicrm_api('uf_match', 'get', array('uf_id' => $uid, 'version' => 3));
  if ($res['is_error'] || empty($res['id']) || empty($res['values'][$res['id']])) {
    return FALSE;
  }
  $id = $res['values'][$res['id']]['contact_id'];
  $res = civicrm_api('contact', 'get', array('contact_id' => $id, 'version' => 3));
  if ($res['is_error']) {
    return FALSE;
  }
  $contacts[$uid] = $res['values'][$res['id']];
  return $contacts[$uid];
}

function sp_debat_get_contact($contact_id) {
  civicrm_initialize();
  require_once 'api/api.php';
  $params = array(
    'version' => 3,
    'sequential' => 1,
    'id' => $contact_id,
  );
  $result = civicrm_api('Contact', 'get', $params);
  if (empty($result['values'])) return FALSE;
  return $result['values'][0];
}

function sp_debat_get_voorzitter_afdelingen($contact_id) {
  civicrm_initialize();
  require_once 'api/api.php';
  $afdelingen_data = array();
  $relations = array(
    '97' => 'Voorzitter',
    '98' => 'Vervangend voorzitter',
  );
  foreach ($relations as $relationship_type_id => $relation_name) {
    // Get afdeling id.
    $params = array(
      'version' => 3,
      'sequential' => 1,
      'relationship_type_id' => $relationship_type_id,
      'contact_id_a' => $contact_id,
      'is_active' => 1,
    );
    $result = civicrm_api('Relationship', 'get', $params);
    if (isset($result['values'])) {
      foreach ($result['values'] as $value) {
        $afdeling_id = $value['contact_id_b'];
        // Get afdeling data.
        $params = array(
          'version' => 3,
          'sequential' => 1,
          'id' => $afdeling_id,
        );
        $afdelingresult = civicrm_api('Contact', 'get', $params);
        if (isset($afdelingresult['values'])) {
          $afdelingen_data[] = $afdelingresult['values'][0];
        }
      }
    }
  }
  if (!empty($afdelingen_data)) {
    return $afdelingen_data;
  }
  return FALSE;
}

function sp_debat_get_province($afdeling_id) {
  civicrm_initialize();
  require_once 'api/api.php';
  // Get regio id.
  $params = array(
    'version' => 3,
    'sequential' => 1,
    'relationship_type_id' => 93,
    'contact_id_a' => $afdeling_id,
    'is_active' => 1,
  );
  $result = civicrm_api('Relationship', 'getsingle', $params);
  if (!isset($result['contact_id_b'])) return FALSE;
  // Get province id.
  $regio_id = $result['contact_id_b'];
  $params = array(
    'version' => 3,
    'sequential' => 1,
    'relationship_type_id' => 95,
    'contact_id_a' => $regio_id,
    'is_active' => 1,
  );
  $result = civicrm_api('Relationship', 'getsingle', $params);
  if (!isset($result['contact_id_b'])) return FALSE;
  // Get province data.
  $province_id = $result['contact_id_b'];
  $params = array(
    'version' => 3,
    'sequential' => 1,
    'contact_id' => $province_id,
  );
  $result = civicrm_api('Contact', 'getsingle', $params);
  if (!isset($result['contact_id'])) return FALSE;
  return $result;
}

function sp_debat_get_event($afdeling_id) {
  $province = sp_debat_get_province($afdeling_id);
  $province_id = $province['id'];
  $province_event_mapping = sp_debat_get_province_event_mapping();
  $event_id = $province_event_mapping[$province_id];

  // Get event data.
  civicrm_initialize();
  require_once 'api/api.php';
  $params = array(
    'version' => 3,
    'sequential' => 1,
    'id' => $event_id,
  );
  $result = civicrm_api('Event', 'getsingle', $params);
  if (!isset($result['id'])) return FALSE;
  return $result;
}

function sp_debat_get_landsdeel($event_id) {
  $event_noord = variable_get('sp_debat_event_noord');
  $event_midden = variable_get('sp_debat_event_midden');
  $event_zuid = variable_get('sp_debat_event_zuid');
  $mapping = array(
    $event_noord => 'noord',
    $event_midden => 'midden',
    $event_zuid => 'zuid',
  );
  return $mapping[$event_id];
}

function sp_debat_get_province_event_mapping() {
  // Mapping: province id => event id.
  $event_noord = variable_get('sp_debat_event_noord');
  $event_midden = variable_get('sp_debat_event_midden');
  $event_zuid = variable_get('sp_debat_event_zuid');
  // Mapping province contact id's to landsdeel.
  $landsdeel_province_mapping = array(
    'noord' => array(806810, 806829, 806866, 806801),
    'midden' => array(806804, 806813, 806818, 806807),
    'zuid' => array(806826, 806895, 806838, 806854),
  );
  // Create province event mapping.
  foreach ($landsdeel_province_mapping as $landsdeel => $provinces) {
    foreach ($provinces as $province) {
      $varname = 'event_' . $landsdeel;
      $province_event_mapping[$province] = $$varname;
    }
  }
  return $province_event_mapping;
}

function sp_debat_get_event_ratio_mapping() {
  // Mapping: event id => ratio.
  $event_noord = variable_get('sp_debat_event_noord');
  $event_midden = variable_get('sp_debat_event_midden');
  $event_zuid = variable_get('sp_debat_event_zuid');
  $ratio_noord = variable_get('sp_debat_ratio_noord');
  $ratio_midden = variable_get('sp_debat_ratio_midden');
  $ratio_zuid = variable_get('sp_debat_ratio_zuid');
  $mapping = array(
    $event_noord => $ratio_noord, // verdeelsleutel Noord
    $event_midden => $ratio_midden, // verdeelsleutel Midden
    $event_zuid => $ratio_zuid, // verdeelsleutel Zuid
  );
  return $mapping;
}

function sp_debat_get_allowed_participants($afdeling_id) {
  $event = sp_debat_get_event($afdeling_id);
  $landsdeel = sp_debat_get_landsdeel($event['id']);
  $free = variable_get('sp_debat_free_' . $landsdeel);
  if ($free) {
    $all_participants = sp_debat_get_all_participants($event['id']);
    $total_participants = sp_debat_get_total_participants($event['id']);
    return ($total_participants - count($all_participants));
  }
  $members = sp_debat_get_afdeling_members($afdeling_id);
  $participants = sp_debat_get_participants($event['id'], $afdeling_id);
  $mapping = sp_debat_get_event_ratio_mapping();
  $max = round(count($members) / $mapping[$event['id']]);
  if ($max < 2) $max = 2;
  $allowed = $max - count($participants);
  return $allowed;
}

function sp_debat_get_afdeling_members($afdeling_id) {
  $afdelingmembers = &drupal_static(__FUNCTION__);
  if (!isset($afdelingmembers[$afdeling_id])) {
    if ($cache = cache_get('sp_debat_data')) {
      $data = $cache->data;
      if (isset($data['afdelingmembers'][$afdeling_id])) {
        $afdelingmembers[$afdeling_id] = $data['afdelingmembers'][$afdeling_id];
      }
      else {
        $afdelingmembers[$afdeling_id] = sp_debat_get_afdeling_members_helper($afdeling_id);
        $data['afdelingmembers'][$afdeling_id] = $afdelingmembers[$afdeling_id];
        cache_set('sp_debat_data', $data, 'cache', time() + 3600);
      }
    }
    else {
      $afdelingmembers[$afdeling_id] = sp_debat_get_afdeling_members_helper($afdeling_id);
      $data['afdelingmembers'][$afdeling_id] = $afdelingmembers[$afdeling_id];
      cache_set('sp_debat_data', $data, 'cache', time() + 3600);
    }
  }
  return $afdelingmembers[$afdeling_id];
}

function sp_debat_get_afdeling_members_helper($afdeling_id) {
  civicrm_initialize();
  require_once 'api/api.php';
  $afdelingmembers = array();
  $result = db_query("SELECT c.id, c.display_name FROM {civicrm_contact} c INNER JOIN {civicrm_value_geostelsel} g ON c.id = g.entity_id INNER JOIN {civicrm_membership} m ON c.id = m.contact_id WHERE (m.membership_type_id = 1 OR m.membership_type_id = 2) AND g.afdeling = :afdeling AND c.contact_type = 'Individual' AND (m.status_id = 1 OR m.status_id = 2)", array(':afdeling' => $afdeling_id));
  if ($result) {
    while ($row = $result->fetchAssoc()) {
      $members[$row['id']] = $row['display_name'];
    }
  }
  return $members;
}

function sp_debat_contact_member_afdeling($contact_id, $afdeling_id) {
  $members = sp_debat_get_afdeling_members($afdeling_id);
  if (isset($members[$contact_id])) {
    return TRUE;
  }
  return FALSE;
}

function sp_debat_get_all_participants($event_id) {
  $participants = array();
  $members = sp_debat_get_afdeling_members($afdeling_id);
  civicrm_initialize();
  require_once 'api/api.php';
  $params = array(
    'version' => 3,
    'sequential' => 1,
    'event_id' => $event_id,
  );
  $result = civicrm_api('Participant', 'get', $params);
  if (empty($result['values'])) return array();
  return $result['values'];
}

function sp_debat_get_participants($event_id, $afdeling_id) {
  $participants = array();
  $all_participants = sp_debat_get_all_participants($event_id);
  $members = sp_debat_get_afdeling_members($afdeling_id);
  if (empty($all_participants)) return array();
  foreach ($all_participants as $id => $participant) {
    if (isset($members[$participant['contact_id']])) {
      $participants[$id] = $participant;
    }
  }
  return $participants;
}

function sp_debat_get_participant($participant_id) {
  civicrm_initialize();
  require_once 'api/api.php';
  $params = array(
    'version' => 3,
    'sequential' => 1,
    'id' => $participant_id,
  );
  $result = civicrm_api('Participant', 'get', $params);
  if (empty($result['values'])) return array();
  return $result['values'][0];
}

function sp_debat_add_participant($contact_id, $event_id) {
  $participants = sp_debat_get_participants($event_id);
  $contact = sp_debat_get_contact($contact_id);
  foreach ($participants as $participant) {
    if ($participant['contact_id'] == $contact_id) {
      drupal_set_message($participant['display_name'] . ' was reeds aangemeld.', 'warning');
      return;
    }
  }
  civicrm_initialize();
  require_once 'api/api.php';
  $params = array(
    'version' => 3,
    'sequential' => 1,
    'event_id' => $event_id,
    'contact_id' => $contact_id,
  );
  $result = civicrm_api('Participant', 'create', $params);
  if (empty($result['values'])) {
    drupal_set_message('Het was niet mogelijk om ' . $contact['display_name'] . ' aan te melden.', 'error');
    return FALSE;
  }
  else {
    // Get contact
    drupal_set_message($contact['display_name'] . ' is aangemeld.');
    return;
  }
}

function sp_debat_remove_participant($participant_id, $event_id) {
  $participant = sp_debat_get_participant($participant_id);
  civicrm_initialize();
  require_once 'api/api.php';
  $params = array(
    'version' => 3,
    'sequential' => 1,
    'id' => $participant_id,
  );
  $result = civicrm_api('Participant', 'delete', $params);
  if (empty($result['values'])) {
    drupal_set_message('Het was niet mogelijk om ' . $participant['display_name'] . ' af te melden.', 'error');
    return FALSE;
  }
  drupal_set_message($participant['display_name'] . ' is afgemeld.');
  return;
}

function sp_debat_get_events() {
  civicrm_initialize();
  require_once 'api/api.php';
  $date = date("Y-m-d H:i:s");
  $result = db_query("SELECT id, title FROM {civicrm_event} WHERE is_active = 1 AND start_date >= :date", array(':date' => $date));
  if ($result) {
    while ($row = $result->fetchAssoc()) {
      $events[$row['id']] = $row['title'];
    }
  }
  return $events;
}

function sp_debat_get_total_participants($event_id) {
  $province_event_mapping = sp_debat_get_province_event_mapping();
  $event_ratio_mapping = sp_debat_get_event_ratio_mapping();
  $ratio = $event_ratio_mapping[$event_id];
  // Create event to province mapping.
  foreach ($province_event_mapping as $p_id => $e_id) {
    $event_province_mapping[$e_id][$p_id] = $p_id;
  } 
  foreach ($event_province_mapping[$event_id] as $province_id) {
    // Get afdelingen in province.
    $query = "SELECT a_r.contact_id_a afdeling_id FROM {civicrm_relationship} r_p INNER JOIN {civicrm_relationship} a_r ON r_p.contact_id_a = a_r.contact_id_b INNER JOIN {civicrm_contact} con ON a_r.contact_id_a = con.id WHERE r_p.is_active = 1 AND a_r.is_active = 1 AND r_p.relationship_type_id = 95 AND a_r.relationship_type_id = 93 AND r_p.contact_id_b = :province_id";
    civicrm_initialize();
    require_once 'api/api.php';
    $result = db_query($query, array(':province_id' => $province_id));
    if ($result) {
      // Get max per afdeling.
      while ($row = $result->fetchAssoc()) {
        $members = sp_debat_get_afdeling_members($row['afdeling_id']);
        $allowed = round(count($members) / $ratio);
        if ($allowed <2) $allowed = 2;
        $total += $allowed;
      }
    }
  }
  return $total;
}
